package template

import (
	"strings"
	"text/template"

	"github.com/cjtoolkit/translate-gen/structure"
)

type Context struct {
	Package  string
	Source   string
	FileBase structure.FileBase
}

func BuildTemplate() *template.Template {
	m := template.FuncMap{}

	m["clean"] = func(value string) string {
		return "`" + strings.Replace(value, "`", "'", -1) + "`"
	}

	return template.Must(template.New("BaseTemplate").Funcs(m).Parse(baseTemplate))
}

const baseTemplate = `// Code generated by translate-gen. DO NOT EDIT.
// Source: {{ .Source }}

package {{ .Package }}

{{ with .FileBase }}
{{ with .Imports }}
import (
	{{ range . }}{{ .Alias }} "{{ .Path }}"
	{{ end }}
)
{{ end }}

{{ with .Base }}// {{ .Language }}
const (
	{{ range .Values }}{{ .Const }} = {{ .Value|clean }}
	{{ end }}
)

{{ if .CreateMap }}
// {{ .Language }} Map
func BaseMap() map[interface{}]string {
	return map[interface{}]string{
		{{ range .Values }}{{ .Const }}: {{ .Const }},
		{{ end }}
	}
}
{{ end }}
{{ end }}

{{ with .Translation }}
// {{ .Language }}
func {{ .FunctionName }}() map[interface{}]string {
	return map[interface{}]string{
		{{ range .Values }}{{ .Const }}: {{ .Value|clean }},
		{{ end }}
	}
}
{{ end }}
{{ end }}`
